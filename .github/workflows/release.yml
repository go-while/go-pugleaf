---
name: Build and Release

"on":
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          # Windows on ARM64 is not commonly used for this type of application
          - os: windows
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.x'

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "$VERSION" > appVersion.txt
          echo "Version set to: $VERSION"

      - name: Create build directory
        run: mkdir -p build

      - name: Set build environment
        run: |
          echo "GOOS=${{ matrix.os }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          if [ "${{ matrix.os }}" = "windows" ]; then
            echo "BINARY_EXT=.exe" >> $GITHUB_ENV
          else
            echo "BINARY_EXT=" >> $GITHUB_ENV
          fi

      - name: Build all binaries
        run: |
          VERSION=$(cat appVersion.txt)

          # List of all applications to build
          apps=(
            "web:webserver"
            "nntp-fetcher:pugleaf-fetcher"
            "nntp-server:pugleaf-nntp-server"
            "expire-news:expire-news"
            "merge-active:merge-active"
            "merge-descriptions:merge-descriptions"
            "test-MsgIdItemCache:test-MsgIdItemCache"
            "history-rebuild:history-rebuild"
            "fix-references:fix-references"
            "fix-thread-activity:fix-thread-activity"
            "rslight-importer:rslight-importer"
            "nntp-analyze:nntp-analyze"
            "recover-db:recover-db"
            "nntp-transfer:nntp-transfer"
            "post-queue:post-queue"
            "tcp2tor:tcp2tor"
          )

          for app in "${apps[@]}"; do
            IFS=':' read -r cmd_dir binary_name <<< "$app"
            echo "Building $cmd_dir -> $binary_name"

            if [ "$cmd_dir" = "nntp-fetcher" ]; then
              # Special build for fetcher with green tea GC
              GOEXPERIMENT=greenteagc go build \
                -o "build/${binary_name}${BINARY_EXT}" \
                -ldflags "-X main.appVersion=$VERSION" \
                "./cmd/$cmd_dir"
            else
              # Standard build (removing -race for cross-compilation)
              go build -o "build/${binary_name}${BINARY_EXT}" \
                -ldflags "-X main.appVersion=$VERSION" \
                "./cmd/$cmd_dir"
            fi

            if [ $? -ne 0 ]; then
              echo "Failed to build $cmd_dir"
              exit 1
            fi
          done

      - name: Generate SHA256 checksums
        run: |
          OS="${{ matrix.os }}"
          ARCH="${{ matrix.arch }}"
          CHECKSUMS_FILE="checksums-${OS}-${ARCH}.sha256"

          echo "Generating SHA256 checksums for ${OS}-${ARCH} binaries..."
          cd build
          sha256sum * > "../${CHECKSUMS_FILE}"
          cd ..

          echo "CHECKSUMS_FILE=${CHECKSUMS_FILE}" >> $GITHUB_ENV
          echo ""
          echo "Generated checksums for ${OS}-${ARCH}:"
          echo "================================="
          cat "${CHECKSUMS_FILE}"

      - name: Create release archive
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          OS="${{ matrix.os }}"
          ARCH="${{ matrix.arch }}"
          ARCHIVE_NAME="go-pugleaf-v${VERSION}-${OS}-${ARCH}"

          # Include checksums in the archive
          cp "${{ env.CHECKSUMS_FILE }}" build/checksums.sha256

          if [ "${{ matrix.os }}" = "windows" ]; then
            zip -r "${ARCHIVE_NAME}.zip" build/ README.md LICENSE
            echo "ARCHIVE_FILE=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" build/ README.md LICENSE
            echo "ARCHIVE_FILE=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-pugleaf-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ${{ env.ARCHIVE_FILE }}
            ${{ env.CHECKSUMS_FILE }}

  release:
    name: Create release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create comprehensive checksums file
        run: |
          echo "Creating comprehensive SHA256 checksums file..."
          echo "# Go-Pugleaf v${{ steps.version.outputs.version }} - SHA256 Checksums" > SHA256SUMS.txt
          echo "# Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> SHA256SUMS.txt
          echo "" >> SHA256SUMS.txt

          # Process each platform's checksums
          for artifact_dir in artifacts/go-pugleaf-*; do
            if [ -d "$artifact_dir" ]; then
              platform=$(basename "$artifact_dir" | sed 's/go-pugleaf-//')
              echo "## Platform: $platform" >> SHA256SUMS.txt

              # Find and process checksums file for this platform
              checksums_file=$(find "$artifact_dir" -name "checksums-*.sha256" | head -1)
              if [ -f "$checksums_file" ]; then
                echo "Processing checksums for $platform..."
                while IFS= read -r line; do
                  # Extract hash and filename
                  hash=$(echo "$line" | cut -d' ' -f1)
                  filename=$(echo "$line" | cut -d' ' -f2-)
                  echo "$hash  $filename ($platform)" >> SHA256SUMS.txt
                done < "$checksums_file"
              fi
              echo "" >> SHA256SUMS.txt
            fi
          done

          echo "Comprehensive checksums file created:"
          echo "====================================="
          cat SHA256SUMS.txt

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', steps.version.outputs.version) || github.ref_name }}
          name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Go-Pugleaf v${{ steps.version.outputs.version }}

            Automated release build of go-pugleaf NNTP server and web gateway.

            ### Included Binaries:
            - `webserver` - Main web interface
            - `pugleaf-fetcher` - Article fetcher from NNTP providers
            - `pugleaf-nntp-server` - NNTP server implementation
            - `expire-news` - Article expiration tool
            - `merge-active` - Active file merger
            - `merge-descriptions` - Description file merger
            - `test-MsgIdItemCache` - Cache testing tool
            - `history-rebuild` - History rebuild utility
            - `fix-references` - Reference fixing tool
            - `fix-thread-activity` - Thread activity fixer
            - `rslight-importer` - RSLight data importer
            - `nntp-analyze` - NNTP analysis tool
            - `recover-db` - Database recovery tool
            - `nntp-transfer` - Tool to transfer newsgroups
            - `post-queue` - Tool to send out queued posts
            - `tcp2tor` - TCP to Tor proxy

            ### Platform Support:
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64)

            ### Binary Verification:
            All binaries include SHA256 checksums for integrity verification:
            - **SHA256SUMS.txt** - Comprehensive checksums for all platforms
            - **checksums-{os}-{arch}.sha256** - Individual platform checksums
            - Each archive also contains a `checksums.sha256` file for verification after extraction

            **Verification Examples:**
            ```bash
            # Verify individual platform binaries
            sha256sum -c checksums-linux-amd64.sha256

            # Verify after archive extraction
            tar -xzf go-pugleaf-v${{ steps.version.outputs.version }}-linux-amd64.tar.gz
            cd build/
            sha256sum -c checksums.sha256
            ```

            Extract the archive for your platform and run the binaries.
            See README.md for usage instructions.
          files: |
            artifacts/*/*
            SHA256SUMS.txt
          draft: false
          prerelease: false